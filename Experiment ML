from glob import glob
import matplotlib.pyplot as plt
import pandas as pd
import plotly.express as px
import seaborn as sns
import wqet_grader
from category_encoders import OneHotEncoder
from IPython.display import VimeoVideo
from ipywidgets import Dropdown, FloatSlider, IntSlider, interact
from sklearn.impute import SimpleImputer
from sklearn.linear_model import LinearRegression, Ridge  # noqa F401
from sklearn.metrics import mean_absolute_error
from sklearn.pipeline import make_pipeline
from sklearn.utils.validation import check_is_fitted


def wrangle(filepath):
    # Read CSV file
    df = pd.read_csv(filepath)

    
# Subset data: Apartments in "Distrito Federal", less than 400,000
    mask_ba = df["place_with_parent_names"].str.contains("Distrito Federal")
    mask_apt = df["property_type"] == "apartment"
    mask_price = df["price_aprox_usd"] < 100_000
    df = df[mask_ba & mask_apt & mask_price]

    
# Subset data: Remove outliers for "surface_covered_in_m2"
    low, high = df["surface_covered_in_m2"].quantile([0.1, 0.9])
    mask_area = df["surface_covered_in_m2"].between(low, high)
    df = df[mask_area]

    
# Split "lat-lon" column
    df[["lat", "lon"]] = df["lat-lon"].str.split(",", expand=True).astype(float)
    df.drop(columns="lat-lon", inplace=True)
    df["borough"] = df["place_with_parent_names"].str.split("|", expand = True)[1]
    df.drop(columns="place_with_parent_names" , inplace = True)
    
# Drop Features with high null counts
    df.drop(columns = ["floor" , "expenses" , "surface_total_in_m2" , "price_usd_per_m2" , "rooms",] , inplace = True )
    
#drop low and high cardinality categorical variables
    df.drop(columns = ["operation" , "property_type" , "currency" , "properati_url"] , inplace = True)
    df.drop(columns = [ 
                         'price',
                        'price_aprox_local_currency',
        'price_per_m2'
     ] , inplace = True)
    return df


files = glob("data/mexico-city-real-estate-*.csv")
files
frames = [wrangle(file) for file in files]
df = pd.concat(frames , ignore_index = True)
print(df.info())
df.head()
df.info()
df.head()

plt.hist(df["price_aprox_usd"])
plt.xlabel("Price [$]")
plt.ylabel("Count")
plt.title("Distribution of Apartment Sizes");

plt.scatter(x=df["surface_covered_in_m2"] , y = df["price_aprox_usd"])
plt.xlabel("Area [sq meters]")
plt.ylabel("Price [USD]")
plt.title(" Mexico City: Price vs Area");

# Plot Mapbox location and price
fig = px.scatter_mapbox(
    df,  # Our DataFrame
    lat="lat",
    lon="lon",
    center={"lat": 19.43, "lon": -99.13},  # Map will be centered on Mexico City
    width=600,  # Width of map
    height=600,  # Height of map
    hover_data=["price_aprox_usd"],  # Display price when hovering mouse over house
)

# Add mapbox_style to figure layout
fig.update_layout(mapbox_style="open-street-map")

# Show figure
fig.show()
